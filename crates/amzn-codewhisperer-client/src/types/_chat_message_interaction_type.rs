// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ChatMessageInteractionType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let chatmessageinteractiontype = unimplemented!();
/// match chatmessageinteractiontype {
///     ChatMessageInteractionType::AgenticCodeAccepted => { /* ... */ },
///     ChatMessageInteractionType::ClickBodyLink => { /* ... */ },
///     ChatMessageInteractionType::ClickFollowUp => { /* ... */ },
///     ChatMessageInteractionType::ClickLink => { /* ... */ },
///     ChatMessageInteractionType::Copy => { /* ... */ },
///     ChatMessageInteractionType::CopySnippet => { /* ... */ },
///     ChatMessageInteractionType::Downvote => { /* ... */ },
///     ChatMessageInteractionType::HoverReference => { /* ... */ },
///     ChatMessageInteractionType::InsertAtCursor => { /* ... */ },
///     ChatMessageInteractionType::Upvote => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `chatmessageinteractiontype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ChatMessageInteractionType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ChatMessageInteractionType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ChatMessageInteractionType::NewFeature` is defined.
/// Specifically, when `chatmessageinteractiontype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ChatMessageInteractionType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
/// Chat Message Interaction Type
#[non_exhaustive]
#[derive(
    ::std::clone::Clone,
    ::std::cmp::Eq,
    ::std::cmp::Ord,
    ::std::cmp::PartialEq,
    ::std::cmp::PartialOrd,
    ::std::fmt::Debug,
    ::std::hash::Hash,
)]
pub enum ChatMessageInteractionType {
    #[allow(missing_docs)] // documentation missing in model
    AgenticCodeAccepted,
    #[allow(missing_docs)] // documentation missing in model
    ClickBodyLink,
    #[allow(missing_docs)] // documentation missing in model
    ClickFollowUp,
    #[allow(missing_docs)] // documentation missing in model
    ClickLink,
    #[allow(missing_docs)] // documentation missing in model
    Copy,
    #[allow(missing_docs)] // documentation missing in model
    CopySnippet,
    #[allow(missing_docs)] // documentation missing in model
    Downvote,
    #[allow(missing_docs)] // documentation missing in model
    HoverReference,
    #[allow(missing_docs)] // documentation missing in model
    InsertAtCursor,
    #[allow(missing_docs)] // documentation missing in model
    Upvote,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(
        note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants."
    )]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for ChatMessageInteractionType {
    fn from(s: &str) -> Self {
        match s {
            "AGENTIC_CODE_ACCEPTED" => ChatMessageInteractionType::AgenticCodeAccepted,
            "CLICK_BODY_LINK" => ChatMessageInteractionType::ClickBodyLink,
            "CLICK_FOLLOW_UP" => ChatMessageInteractionType::ClickFollowUp,
            "CLICK_LINK" => ChatMessageInteractionType::ClickLink,
            "COPY" => ChatMessageInteractionType::Copy,
            "COPY_SNIPPET" => ChatMessageInteractionType::CopySnippet,
            "DOWNVOTE" => ChatMessageInteractionType::Downvote,
            "HOVER_REFERENCE" => ChatMessageInteractionType::HoverReference,
            "INSERT_AT_CURSOR" => ChatMessageInteractionType::InsertAtCursor,
            "UPVOTE" => ChatMessageInteractionType::Upvote,
            other => ChatMessageInteractionType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl ::std::str::FromStr for ChatMessageInteractionType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(ChatMessageInteractionType::from(s))
    }
}
impl ChatMessageInteractionType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ChatMessageInteractionType::AgenticCodeAccepted => "AGENTIC_CODE_ACCEPTED",
            ChatMessageInteractionType::ClickBodyLink => "CLICK_BODY_LINK",
            ChatMessageInteractionType::ClickFollowUp => "CLICK_FOLLOW_UP",
            ChatMessageInteractionType::ClickLink => "CLICK_LINK",
            ChatMessageInteractionType::Copy => "COPY",
            ChatMessageInteractionType::CopySnippet => "COPY_SNIPPET",
            ChatMessageInteractionType::Downvote => "DOWNVOTE",
            ChatMessageInteractionType::HoverReference => "HOVER_REFERENCE",
            ChatMessageInteractionType::InsertAtCursor => "INSERT_AT_CURSOR",
            ChatMessageInteractionType::Upvote => "UPVOTE",
            ChatMessageInteractionType::Unknown(value) => value.as_str(),
        }
    }

    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AGENTIC_CODE_ACCEPTED",
            "CLICK_BODY_LINK",
            "CLICK_FOLLOW_UP",
            "CLICK_LINK",
            "COPY",
            "COPY_SNIPPET",
            "DOWNVOTE",
            "HOVER_REFERENCE",
            "INSERT_AT_CURSOR",
            "UPVOTE",
        ]
    }
}
impl ::std::convert::AsRef<str> for ChatMessageInteractionType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl ChatMessageInteractionType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for ChatMessageInteractionType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            ChatMessageInteractionType::AgenticCodeAccepted => write!(f, "AGENTIC_CODE_ACCEPTED"),
            ChatMessageInteractionType::ClickBodyLink => write!(f, "CLICK_BODY_LINK"),
            ChatMessageInteractionType::ClickFollowUp => write!(f, "CLICK_FOLLOW_UP"),
            ChatMessageInteractionType::ClickLink => write!(f, "CLICK_LINK"),
            ChatMessageInteractionType::Copy => write!(f, "COPY"),
            ChatMessageInteractionType::CopySnippet => write!(f, "COPY_SNIPPET"),
            ChatMessageInteractionType::Downvote => write!(f, "DOWNVOTE"),
            ChatMessageInteractionType::HoverReference => write!(f, "HOVER_REFERENCE"),
            ChatMessageInteractionType::InsertAtCursor => write!(f, "INSERT_AT_CURSOR"),
            ChatMessageInteractionType::Upvote => write!(f, "UPVOTE"),
            ChatMessageInteractionType::Unknown(value) => write!(f, "{}", value),
        }
    }
}
